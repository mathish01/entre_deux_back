generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         Int       @id @default(autoincrement())
  username   String    @db.VarChar(255)
  email      String    @unique @db.VarChar(255)
  password   String    @db.VarChar(255)
  phone      String    @db.VarChar(50)
  role       String    @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @updatedAt @db.Timestamptz(6)

  posts           Posts[]
  comments        Comments[]
  likesOnPosts    LikePost[]
  likesOnComments LikeComment[]
  followers       Follow[]      @relation("follows_follower_idToUser")
  following       Follow[]      @relation("follows_user_idToUser")
}

model Posts {
  id          Int       @id @default(autoincrement())
  image_url   String    @db.VarChar(255)
  title       String    @db.VarChar(50)
  description String    @db.VarChar(255)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @updatedAt @db.Timestamptz(6)

  user_id Int?
  user    Users? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  comments Comments[]
  likes    LikePost[]
  tags     PostTag[]
}

model Comments {
  id         Int       @id @default(autoincrement())
  content    String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @updatedAt @db.Timestamptz(6)

  user_id Int?
  post_id Int?
  user    Users? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post    Posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)

  likes LikeComment[]
}

model LikePost {
  id      Int   @id @default(autoincrement())
  user_id Int?
  post_id Int?
  user    Users? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post    Posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model LikeComment {
  id         Int      @id @default(autoincrement())
  user_id    Int?
  comment_id Int?
  user       Users?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comment    Comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)
}

model Follow {
  id          Int  @id @default(autoincrement())
  user_id     Int?
  follower_id Int?

  user     Users? @relation("follows_user_idToUser", fields: [user_id], references: [id], onDelete: Cascade)
  follower Users? @relation("follows_follower_idToUser", fields: [follower_id], references: [id], onDelete: Cascade)

  @@unique([user_id, follower_id])
}

model Tags {
  id         Int       @id @default(autoincrement())
  name       String    @unique @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  postTags   PostTag[]
}

model PostTag {
  id      Int @id @default(autoincrement())
  post_id Int
  tag_id  Int

  post Posts @relation(fields: [post_id], references: [id], onDelete: Cascade)
  tag  Tags  @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@unique([post_id, tag_id])
}
