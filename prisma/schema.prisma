generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model commentaires {
  id            Int             @id @default(autoincrement())
  commentaire   String          @db.VarChar(255)
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @db.Timestamptz(6)
  user_id       Int?
  post_id       Int?
  posts         posts?          @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  like_comments like_comments[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model follows {
  user_id                          Int?
  follower_id                      Int?
  users_follows_follower_idTousers users? @relation("follows_follower_idTousers", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_follows_user_idTousers     users? @relation("follows_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@ignore
}

model like_comments {
  id             Int           @id @default(autoincrement())
  user_id        Int?
  commentaire_id Int?
  commentaires   commentaires? @relation(fields: [commentaire_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users          users?        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model like_posts {
  id      Int    @id @default(autoincrement())
  user_id Int?
  post_id Int?
  posts   posts? @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users   users? @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model posts {
  id              Int               @id @default(autoincrement())
  image_url       String            @db.VarChar(255)
  title           String            @db.VarChar(50)
  description     String            @db.VarChar(255)
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?         @db.Timestamptz(6)
  user_id         Int?
  commentaires    commentaires[]
  like_posts      like_posts[]
  users           users?            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  references_tags references_tags[]
}

model references_tags {
  id      Int    @id @default(autoincrement())
  tag     String @db.VarChar(255)
  post_id Int?
  posts   posts? @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                                 Int             @id @default(autoincrement())
  username                           String          @db.VarChar(255)
  email                              String          @db.VarChar(255)
  password                           String          @db.VarChar(255)
  phone                              String          @db.VarChar(50)
  role                               String          @db.VarChar(50)
  created_at                         DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at                         DateTime?       @db.Timestamptz(6)
  commentaires                       commentaires[]
  follows_follows_follower_idTousers follows[]       @relation("follows_follower_idTousers")
  follows_follows_user_idTousers     follows[]       @relation("follows_user_idTousers")
  like_comments                      like_comments[]
  like_posts                         like_posts[]
  posts                              posts[]
}
