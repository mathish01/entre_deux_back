generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model likePost {
  id      Int    @id(map: "LikePost_pkey") @default(autoincrement())
  user_id Int?
  post_id Int?
  post    posts? @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "LikePost_post_id_fkey")
  user    users? @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "LikePost_user_id_fkey")
}

model likeComment {
  id         Int       @id(map: "LikeComment_pkey") @default(autoincrement())
  user_id    Int?
  comment_id Int?
  comment    comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade, map: "LikeComment_comment_id_fkey")
  user       users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "LikeComment_user_id_fkey")
}

model follow {
  id          Int    @id(map: "Follow_pkey") @default(autoincrement())
  user_id     Int?
  follower_id Int?
  follower    users? @relation("follows_follower_idToUser", fields: [follower_id], references: [id], onDelete: Cascade, map: "Follow_follower_id_fkey")
  user        users? @relation("follows_user_idToUser", fields: [user_id], references: [id], onDelete: Cascade, map: "Follow_user_id_fkey")

  @@unique([user_id, follower_id], map: "Follow_user_id_follower_id_key")
}

model postTag {
  id      Int   @id(map: "PostTag_pkey") @default(autoincrement())
  post_id Int
  tag_id  Int
  post    posts @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "PostTag_post_id_fkey")
  tag     tags  @relation(fields: [tag_id], references: [id], onDelete: Cascade, map: "PostTag_tag_id_fkey")

  @@unique([post_id, tag_id], map: "PostTag_post_id_tag_id_key")
}

model posts {
  id          Int        @id(map: "Post_pkey") @default(autoincrement())
  image_url   String     @db.VarChar(255)
  title       String     @db.VarChar(50)
  description String     @db.VarChar(255)
  created_at  DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?  @db.Timestamptz(6)
  user_id     Int?
  comments    comments[]
  likes       likePost[]
  tags        postTag[]
  user        users?     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "Post_user_id_fkey")
}

model tags {
  id         Int       @id(map: "Tag_pkey") @default(autoincrement())
  name       String    @unique(map: "Tag_name_key") @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  postTags   postTag[]
}

model users {
  id              Int           @id(map: "User_pkey") @default(autoincrement())
  username        String        @db.VarChar(255)
  email           String        @unique(map: "User_email_key") @db.VarChar(255)
  password        String        @db.VarChar(255)
  phone           String        @db.VarChar(50)
  role            String        @db.VarChar(50)
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  comments        comments[]
  followers       follow[]      @relation("follows_follower_idToUser")
  following       follow[]      @relation("follows_user_idToUser")
  likesOnComments likeComment[]
  likesOnPosts    likePost[]
  post            posts[]
}

model comments {
  id         Int           @id(map: "Comment_pkey") @default(autoincrement())
  content    String        @db.VarChar(255)
  created_at DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at DateTime?     @db.Timestamptz(6)
  user_id    Int?
  post_id    Int?
  posts      posts?        @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "Comment_post_id_fkey")
  users      users?        @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "Comment_user_id_fkey")
  likes      likeComment[]
}
